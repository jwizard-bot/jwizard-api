name: Build and deploy JWizard API

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Determinate latest JWizard LIB release tag
        id: lib-release
        env:
          API_URL: https://api.github.com/repos/${{ vars.GH_LIB_REPO }}/releases/latest
        run: |
          latest_tag=$(curl -s ${{ env.API_URL }} | jq -r '.tag_name') && \
            [ "$latest_tag" != "null" ] && echo "tag=${latest_tag:1}" >> $GITHUB_OUTPUT || \
            { echo "Error: Could not define latest tag."; exit 1; }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Determinate build version
        id: version
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean build directory
        run: ./gradlew clean --no-daemon

      - name: Package to JAR
        run: ./gradlew shadowJar --no-daemon
        env:
          JWIZARD_VERSION: ${{ steps.version.outputs.sha_short }}
          JWIZARD_LIB_VERSION: ${{ steps.lib-release.outputs.tag }}

      - name: Upload generated JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-jar
          path: .bin/jwizard-api.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      PM2_API_NAME: JWizardApi
      SERVER_OUTPUT: "/var/www/jwizard-api"
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}

    steps:
      - name: Download generated JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: output-jar

      - name: Stop existing process
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: ~/exec/process stop ${{ env.PM2_API_NAME }}

      - name: Move files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          source: "jwizard-api.jar"
          target: ${{ env.SERVER_OUTPUT }}
          rm: true

      - name: Determinate build version and date
        id: deployment
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_date=$(date +'%Y-%m-%dT%H:%M:%S%z %Z')" >> $GITHUB_OUTPUT

      - name: Determinate latest release tag
        id: release
        env:
          API_URL: https://api.github.com/repos/${{ github.repository }}/releases/latest
          DEFAULT: none
        run: |
          latest_tag=$(curl -s ${{ env.API_URL }} | jq -r '.tag_name // "${{ env.DEFAULT }}"')
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Re-create config file
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: ./make-conf ${{ env.SERVER_OUTPUT }} "${{ secrets.CONFIG_FILE_CONTENT }}" \
            "JWIZARD_BUILD_VERSION=${{ steps.deployment.outputs.sha_short }}_${{ github.run_number }}" \
            "JWIZARD_BUILD_DATE=${{ steps.deployment.outputs.build_date }}" \
            "JWIZARD_LATEST_RELEASE_TAG=${{ steps.release.outputs.tag }}"

      - name: Start process
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_PASSPHRASE }}
          script: ~/exec/process start ${{ env.PM2_API_NAME }}
